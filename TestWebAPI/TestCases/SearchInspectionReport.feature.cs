// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestWebAPI.TestCases
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SearchInspectionReportFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SearchInspectionReport.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchInspectionReport", @"Target: api/DynamicPage/GetViewResult/{entityName}
Test Scenarios: 
1. Search All Inspection Reports;
2. Search Inspection Report by primary project(lookup);
3. Search Inspection Report by status(status);
4. Search Inspection Report by report date(datetime);", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "SearchInspectionReport")))
            {
                TestWebAPI.TestCases.SearchInspectionReportFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "PImpProjAutoID",
                        "PContractAutoID",
                        "ContractPerson",
                        "InspectorID",
                        "WorkPerformed",
                        "ReportStatusID",
                        "ReportDate"});
            table1.AddRow(new string[] {
                        "1",
                        "1111 - 1111",
                        "cofee02 - cofee02",
                        "12 - 12",
                        "1",
                        "WorkPerformed",
                        "Approved",
                        "2015-1-3"});
            table1.AddRow(new string[] {
                        "2",
                        "107520 - tt",
                        "cofee02 - cofee02",
                        "12 - 12",
                        "1",
                        "WorkPerformed",
                        "Draft",
                        "2015-1-3"});
            table1.AddRow(new string[] {
                        "3",
                        "107520 - tt",
                        "cofee02 - cofee02",
                        "12 - 12",
                        "1",
                        "WorkPerformed",
                        "Approved",
                        "2015-1-3"});
            table1.AddRow(new string[] {
                        "4",
                        "107520 - tt",
                        "cofee02 - cofee02",
                        "12 - 12",
                        "1",
                        "WorkPerformed",
                        "Approved",
                        "2015-1-4"});
#line 10
 testRunner.Given("Exist following Inspection Reports", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Search All Inspection Reports")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchInspectionReport")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("p3")]
        public virtual void SearchAllInspectionReports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search All Inspection Reports", new string[] {
                        "p3"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "RequestParameter",
                        "Value"});
            table2.AddRow(new string[] {
                        "_QueryType",
                        "0"});
            table2.AddRow(new string[] {
                        "_Page",
                        "0"});
            table2.AddRow(new string[] {
                        "_PageSize",
                        "0"});
#line 19
 testRunner.When("Send a request to api:GetViewResult/InspectionReport", ((string)(null)), table2, "When ");
#line 24
 testRunner.Then("These Inspection Reports should be searched out:#1,#2,#3,#4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Search Inspection Report By Conditions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SearchInspectionReport")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("p3")]
        public virtual void SearchInspectionReportByConditions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Inspection Report By Conditions", new string[] {
                        "p3"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "RequestParameter",
                        "Value"});
            table3.AddRow(new string[] {
                        "_QueryType",
                        "1"});
            table3.AddRow(new string[] {
                        "_Page",
                        "0"});
            table3.AddRow(new string[] {
                        "_PageSize",
                        "0"});
            table3.AddRow(new string[] {
                        "A0_PImpProjAutoID",
                        "107520 - tt"});
            table3.AddRow(new string[] {
                        "A0_ReportDate",
                        "2015-01-03,2015-01-03"});
#line 28
 testRunner.When("Send a request to api:GetViewResult/InspectionReport", ((string)(null)), table3, "When ");
#line 36
 testRunner.Then("These Inspection Reports should be searched out:#2,#3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.And("These Inspection Reports should not be searched out:#1,#4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
