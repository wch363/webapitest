// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestWebAPI.TestCases
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AddInspectionReportFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddInspectionReport.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddInspectionReport", "Target: POST api/Organization/Save\r\nTest Scenarios:\r\n1. Create a new Inspection R" +
                    "eport;\r\n2. Create a new Inspection Report with line items.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "AddInspectionReport")))
            {
                TestWebAPI.TestCases.AddInspectionReportFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create Inspection Report")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddInspectionReport")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("p1")]
        public virtual void CreateInspectionReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Inspection Report", new string[] {
                        "p1"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AttributePhysicalName",
                        "Value"});
            table1.AddRow(new string[] {
                        "PImpProjAutoID",
                        "1111 - 1111"});
            table1.AddRow(new string[] {
                        "PContractAutoID",
                        "cofee02 - cofee02"});
            table1.AddRow(new string[] {
                        "ContractPerson",
                        "12 - 12"});
            table1.AddRow(new string[] {
                        "InspectorID",
                        "1"});
            table1.AddRow(new string[] {
                        "WorkPerformed",
                        "WorkPerformed"});
#line 10
 testRunner.Given("Inspection Report information as following", ((string)(null)), table1, "Given ");
#line 17
 testRunner.When("Post Inspection Report information to api \'Organization/Save\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("A new Inspection Report should be created and all fields saved correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create Inspection Report With Line Items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddInspectionReport")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("p1")]
        public virtual void CreateInspectionReportWithLineItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Inspection Report With Line Items", new string[] {
                        "p1"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AttributePhysicalName",
                        "Value"});
            table2.AddRow(new string[] {
                        "PImpProjAutoID",
                        "1111 - 1111"});
            table2.AddRow(new string[] {
                        "PContractAutoID",
                        "cofee02 - cofee02"});
            table2.AddRow(new string[] {
                        "ContractPerson",
                        "12 - 12"});
            table2.AddRow(new string[] {
                        "InspectorID",
                        "1"});
            table2.AddRow(new string[] {
                        "WorkPerformed",
                        "WorkPerformed"});
#line 22
 testRunner.Given("Inspection Report information as following", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AttributePhysicalName",
                        "Value"});
            table3.AddRow(new string[] {
                        "SOVItemAutoID",
                        "1.6 - Bonds"});
#line 29
 testRunner.And("Input line items at \'Labor\' section", ((string)(null)), table3, "And ");
#line 32
 testRunner.When("Post Inspection Report information to api \'Organization/Save\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("A new Inspection Report should be created and all fields saved correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
